[
  {
    "objectID": "project3.html",
    "href": "project3.html",
    "title": "Project3 : 타이타닉 데이터 분석",
    "section": "",
    "text": "seaborn에서는 titanic에 대한 데이터를 제공함.\nRMS 타이타닉은 영국의 화이트 스타 라인이 운영한 북대서양 횡단 여객선으로, 1921년 4월 10일 첫 출항함. 영국의 사우샘프턴을 떠나 미국의 뉴욕으로 향하던 중에 4월 15일 빙산과 충돌하여 침몰하였으며, 이로 인해 1,514명이 사망한 것으로 알려져 있음.\n타이타닉 데이터를 분석하여 생존에 영향을 준 요인을 파악하고, 이를 바탕으로 생존 여부를 예측하는 모델을 학습시키고자 함."
  },
  {
    "objectID": "project3.html#데이터셋",
    "href": "project3.html#데이터셋",
    "title": "Project3 : 타이타닉 데이터 분석",
    "section": "",
    "text": "seaborn에서는 titanic에 대한 데이터를 제공함.\nRMS 타이타닉은 영국의 화이트 스타 라인이 운영한 북대서양 횡단 여객선으로, 1921년 4월 10일 첫 출항함. 영국의 사우샘프턴을 떠나 미국의 뉴욕으로 향하던 중에 4월 15일 빙산과 충돌하여 침몰하였으며, 이로 인해 1,514명이 사망한 것으로 알려져 있음.\n타이타닉 데이터를 분석하여 생존에 영향을 준 요인을 파악하고, 이를 바탕으로 생존 여부를 예측하는 모델을 학습시키고자 함."
  },
  {
    "objectID": "project3.html#데이터-확인-및-전처리",
    "href": "project3.html#데이터-확인-및-전처리",
    "title": "Project3 : 타이타닉 데이터 분석",
    "section": "2. 데이터 확인 및 전처리",
    "text": "2. 데이터 확인 및 전처리\n\n# 라이브러리 불러오기 - 데이터 분석 및 시각화\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# 라이브러리 불러오기 - 모델링\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# 스타일 설정\n%matplotlib inline\nsns.set_style('whitegrid')\nplt.style.use('fivethirtyeight')\n\n\n# 데이터 불러오기\ntitanic = sns.load_dataset('titanic')\ntitanic.head()\n\n\n\n\n\n\n\n\nsurvived\npclass\nsex\nage\nsibsp\nparch\nfare\nembarked\nclass\nwho\nadult_male\ndeck\nembark_town\nalive\nalone\n\n\n\n\n0\n0\n3\nmale\n22.0\n1\n0\n7.2500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nFalse\n\n\n1\n1\n1\nfemale\n38.0\n1\n0\n71.2833\nC\nFirst\nwoman\nFalse\nC\nCherbourg\nyes\nFalse\n\n\n2\n1\n3\nfemale\n26.0\n0\n0\n7.9250\nS\nThird\nwoman\nFalse\nNaN\nSouthampton\nyes\nTrue\n\n\n3\n1\n1\nfemale\n35.0\n1\n0\n53.1000\nS\nFirst\nwoman\nFalse\nC\nSouthampton\nyes\nFalse\n\n\n4\n0\n3\nmale\n35.0\n0\n0\n8.0500\nS\nThird\nman\nTrue\nNaN\nSouthampton\nno\nTrue\n\n\n\n\n\n\n\n\n# 데이터 확인 \ntitanic.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 15 columns):\n #   Column       Non-Null Count  Dtype   \n---  ------       --------------  -----   \n 0   survived     891 non-null    int64   \n 1   pclass       891 non-null    int64   \n 2   sex          891 non-null    object  \n 3   age          714 non-null    float64 \n 4   sibsp        891 non-null    int64   \n 5   parch        891 non-null    int64   \n 6   fare         891 non-null    float64 \n 7   embarked     889 non-null    object  \n 8   class        891 non-null    category\n 9   who          891 non-null    object  \n 10  adult_male   891 non-null    bool    \n 11  deck         203 non-null    category\n 12  embark_town  889 non-null    object  \n 13  alive        891 non-null    object  \n 14  alone        891 non-null    bool    \ndtypes: bool(2), category(2), float64(2), int64(4), object(5)\nmemory usage: 80.7+ KB\n\n\n\nseaborn 라이브러리에서 제공하는 titanic 데이터 사용\n\nsurvived: 생존 여부(0, 1)\npclass: 객실 등급(1, 2, 3)\nsex: 성별\nage: 나이\nsibsp: 함께 탑승한 형제자매, 배우자 수\nparch: 함께 탑승한 부모, 자식 수\nfare: 요금\nembarked: 탑승 항구(S, C, Q)\nclass: 객실 등급(First, Second, Third)\nwho: 사람 구분(man, woman, child)\nadult_male: 성인 남자 여부(True, False)\ndeck: 갑판\nembark_town: 탑승 항구(Southhampton, Cherbourg, Queenstown)\nalive: 생존여부(no, yes)\nalone: 1인 탑승 여부(True, False)\n\n\n\n# 데이터 전처리(1) : 의미가 중복되는 변수 삭제하기\ntitanic.drop(['class', 'embark_town', 'alive', 'adult_male'], axis=1, inplace=True)\n\n\n# 데이터 전처리(2) : 결측값 확인\n# 결측값은 age, embarked, deck에서 있는 것으로 나타남\ntitanic.isna().sum()\n\nsurvived      0\npclass        0\nsex           0\nage         177\nsibsp         0\nparch         0\nfare          0\nembarked      2\nwho           0\ndeck        688\nalone         0\ndtype: int64\n\n\n\n# 데이터 전처리 : 결측값 처리\n# age - 전체 데이터의 평균 나이로 채우기\ntitanic['age'] = titanic['age'].fillna(titanic['age'].mean())\n# deck - 결측치 너무 많음 -&gt; 제거\ntitanic.drop('deck', axis=1, inplace=True, errors='ignore')\n# Embarked - 최빈값으로 채우기\ntitanic['embarked'] = titanic['embarked'].fillna(titanic['embarked'].mode()[0])\n\n\n# 범주형 데이터 변환\n# 범주형 변수들을 원-핫 인코딩으로 변환\nsex = pd.get_dummies(titanic['sex'], drop_first=True, dtype=int)\nembark = pd.get_dummies(titanic['embarked'], drop_first=True, dtype=int)\n\n# 기존의 범주형 열과 불필요한 열 제거\ntitanic.drop(['sex', 'embarked', 'who'], axis=1, inplace=True)\n\n# 변환된 수치형 데이터프레임과 기존 데이터프레임 병합\ntitanic = pd.concat([titanic, sex, embark], axis=1)\n\ntitanic.head()\n\n\n\n\n\n\n\n\nsurvived\npclass\nage\nsibsp\nparch\nfare\nalone\nmale\nQ\nS\n\n\n\n\n0\n0\n3\n22.0\n1\n0\n7.2500\nFalse\n1\n0\n1\n\n\n1\n1\n1\n38.0\n1\n0\n71.2833\nFalse\n0\n0\n0\n\n\n2\n1\n3\n26.0\n0\n0\n7.9250\nTrue\n0\n0\n1\n\n\n3\n1\n1\n35.0\n1\n0\n53.1000\nFalse\n0\n0\n1\n\n\n4\n0\n3\n35.0\n0\n0\n8.0500\nTrue\n1\n0\n1"
  },
  {
    "objectID": "project3.html#학습평가-데이터-분할",
    "href": "project3.html#학습평가-데이터-분할",
    "title": "Project3 : 타이타닉 데이터 분석",
    "section": "3. 학습/평가 데이터 분할",
    "text": "3. 학습/평가 데이터 분할\n\n학습 데이터와 평가 데이터를 7:3 비율로 분할함\n\n\n# 학습/평가 데이터 분할 (7:3비율)\nX = titanic.drop('survived', axis=1)   # feature\ny = titanic['survived']               # target \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
  },
  {
    "objectID": "project3.html#데이터-탐색",
    "href": "project3.html#데이터-탐색",
    "title": "Project3 : 타이타닉 데이터 분석",
    "section": "4. 데이터 탐색",
    "text": "4. 데이터 탐색\n\n# 요약 통계량 확인\nX_train.describe()\n\n\n\n\n\n\n\n\npclass\nage\nsibsp\nparch\nfare\nmale\nQ\nS\n\n\n\n\ncount\n623.000000\n623.000000\n623.000000\n623.000000\n623.000000\n623.000000\n623.000000\n623.000000\n\n\nmean\n2.341894\n29.344479\n0.576244\n0.386838\n31.840730\n0.658106\n0.088283\n0.735152\n\n\nstd\n0.819945\n13.028013\n1.216267\n0.807692\n51.027372\n0.474725\n0.283933\n0.441607\n\n\nmin\n1.000000\n0.420000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n25%\n2.000000\n22.000000\n0.000000\n0.000000\n7.925000\n0.000000\n0.000000\n0.000000\n\n\n50%\n3.000000\n29.699118\n0.000000\n0.000000\n14.454200\n1.000000\n0.000000\n1.000000\n\n\n75%\n3.000000\n35.000000\n1.000000\n0.000000\n30.750000\n1.000000\n0.000000\n1.000000\n\n\nmax\n3.000000\n80.000000\n8.000000\n6.000000\n512.329200\n1.000000\n1.000000\n1.000000\n\n\n\n\n\n\n\n\n# 생존 여부에 따른 승객 수\nsns.countplot(x='survived', data=titanic, hue='survived', palette='RdBu_r', legend=False)\nplt.title('survivor vs the dead')\nplt.show()\n\n\n\n\n\n\n\n\n\n사망자가 생존자보다 많음\n\n\n# 성별에 따른 생존율\nsns.countplot(x='survived', hue='male', data=titanic, palette='viridis')\nplt.title('Survival by gender')\nplt.show()\n\n\n\n\n\n\n\n\n\n남성이 여성보다 생존하지 못한 비율이 더 높음\n\n\n# 객실 등급에 따른 생존율\nsns.countplot(x='survived', hue='pclass', data=titanic, palette='rainbow')\nplt.title('Survival based on room grade')\nplt.show()\n\n\n\n\n\n\n\n\n\n3등급 승객의 사망률이 가장 높고, 1등급 승객의 생존률이 가장 높음.\n즉, 객실 등급이 높을수록 생존 가능성이 높은 것을 확인할 수 있음.\n\n\n# 나이 분포\nsns.histplot(titanic['age'].dropna(), kde=True, bins=30, color='darkred')\nplt.title('Age Distribution')\nplt.show()\n\n\n\n\n\n\n\n\n\n타이타닉 탑승객의 나이는 20~30대에 가장 많으며, 대체로 젊은 층이 많았음.\n\n\n# 산점도\nsns.pairplot(df_train, height=0.8, plot_kws={'s':5}, diag_kind='kde')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상관계수\ncorr_train=df_train.corr()\nupp_mat = np.triu(corr_train)\n\nplt.figure(figsize=(8,6))\nsns.heatmap(corr_train, annot=True, mask=upp_mat, vmin=-1, vmax=1, cmap='coolwarm')\nplt.show()\n\n\n\n\n\n\n\n\n\n생존 여부(survived)는 성별(male)과 -0.53의 비교적 강한 음의 상관관계를 가지며, 이는 여성 승객의 생존률이 높았음을 의미함.\n사회적 지위(pclass)는 -0.31, 운임(fare)은 0.24로 생존 여부(survived)과의 유의미한 상관관계를 보임.\nalone, age, sibsp, parch 등은 생존 여부(survived)와 약한 수준의 상관관계를 보임.\n따라서 생존 여부(survived)를 예측하는 특성(feature)으로 해당 변수를 선택함."
  },
  {
    "objectID": "project3.html#분류모델-학습-및-평가",
    "href": "project3.html#분류모델-학습-및-평가",
    "title": "Project3 : 타이타닉 데이터 분석",
    "section": "5. 분류모델 학습 및 평가",
    "text": "5. 분류모델 학습 및 평가\n\na = [1,2]\na\n\n[1, 2]\n\n\n\na.append(10)\na\n\n[1, 2, 10]\n\n\n\n# 최적의 k 값 선택 \nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nk_range = range(1, 20, 2)  # 홀수 k값 탐색\nk_scores = []\n\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy')\n    k_scores.append(scores.mean())\n    print(f'k={k}일 때 정확도: {scores.mean():.3f}')\n\nk=1일 때 정확도: 0.679\nk=3일 때 정확도: 0.695\nk=5일 때 정확도: 0.699\nk=7일 때 정확도: 0.691\nk=9일 때 정확도: 0.691\nk=11일 때 정확도: 0.686\nk=13일 때 정확도: 0.695\nk=15일 때 정확도: 0.689\nk=17일 때 정확도: 0.696\nk=19일 때 정확도: 0.700\n\n\n\n# 모델 성능이 가장 좋은 k 값 선택\nbest_k = k_range[k_scores.index(max(k_scores))]\nprint(f\"최적의 k 값은 {best_k}이며, 평균 정확도는 {max(k_scores):.3f}\")\n\n최적의 k 값은 19이며, 평균 정확도는 0.700\n\n\n\n#  K-NN 분류 모델 생성 및 학습\nknn = KNeighborsClassifier(n_neighbors=best_k)\nknn.fit(X_train, y_train)\n\n# train과 test 컬럼 맞추기\nX_test = X_test.reindex(columns=X_train.columns, fill_value=0)\n\n# 학습 데이터로 학습한 분류모델에 평가 데이터를 입력하여 클래스 분류\ny_pred = knn.predict(X_test)\n\n# 분류 모델 평가 : 정확도, 정밀도, 재현도\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred)\nrecall = recall_score(y_test, y_pred)\n\nprint(f\"정확도 : {accuracy:.3f}\")\nprint(f\"정밀도 : {precision:.3f}\") \nprint(f\"재현율 : {recall:.3f}\")\n\n정확도 : 0.743\n정밀도 : 0.756\n재현율 : 0.559\n\n\n\n정확도는 0.743으로, 모델이 타이타닉 생존 여부를 약 74.3%의 비율로 올바르게 예측함을 의미함.\n정밀도는 0.756으로, 생존으로 예측한 승객 중 약 75.6%가 실제로 생존했음을 나타냄.\n재현율은 0.559로, 실제 생존자 중 약 55.9%만을 모델이 정확히 찾아냈음을 시사함.\n따라서 재현율이 낮아 놓치는 생존자가 비교적 많아 모델의 성능 개선이 필요한 상황임."
  },
  {
    "objectID": "project1.html",
    "href": "project1.html",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "",
    "text": "scikit-learn에서는 1990년대 캘리포니아지역에 주택 가격에 대한 데이터를 제공함\n캘리포니아 주택 가격에 영향을 미치는 요인은 무엇인지 파악하고, 예측하는 회귀모델을 학습시키고자 함"
  },
  {
    "objectID": "project1.html#데이터셋",
    "href": "project1.html#데이터셋",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "",
    "text": "scikit-learn에서는 1990년대 캘리포니아지역에 주택 가격에 대한 데이터를 제공함\n캘리포니아 주택 가격에 영향을 미치는 요인은 무엇인지 파악하고, 예측하는 회귀모델을 학습시키고자 함"
  },
  {
    "objectID": "project1.html#데이터-확인-및-전처리",
    "href": "project1.html#데이터-확인-및-전처리",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "2. 데이터 확인 및 전처리",
    "text": "2. 데이터 확인 및 전처리\n\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# 데이터 불러오기\nfrom sklearn.datasets import fetch_california_housing\ndata = fetch_california_housing(as_frame=True)\ndf = data.frame\ndf.head(3)\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\n0\n8.3252\n41.0\n6.984127\n1.023810\n322.0\n2.555556\n37.88\n-122.23\n4.526\n\n\n1\n8.3014\n21.0\n6.238137\n0.971880\n2401.0\n2.109842\n37.86\n-122.22\n3.585\n\n\n2\n7.2574\n52.0\n8.288136\n1.073446\n496.0\n2.802260\n37.85\n-122.24\n3.521\n\n\n\n\n\n\n\n\n# 데이터 확인 \ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 20640 entries, 0 to 20639\nData columns (total 9 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   MedInc       20640 non-null  float64\n 1   HouseAge     20640 non-null  float64\n 2   AveRooms     20640 non-null  float64\n 3   AveBedrms    20640 non-null  float64\n 4   Population   20640 non-null  float64\n 5   AveOccup     20640 non-null  float64\n 6   Latitude     20640 non-null  float64\n 7   Longitude    20640 non-null  float64\n 8   MedHouseVal  20640 non-null  float64\ndtypes: float64(9)\nmemory usage: 1.4 MB\n\n\n\n캘리포니아 주택 가격 데이터를 확인한 결과, 관측값은 20,640개, 변수는 9개로 나타남\n특성(feature)은 다음과 같음\nMedInc 지역 중위 소득 (10,000 USD)\nHouseAge 주택 연식 (건축 후 경과된 연도 수)\nAveRooms 가구당 평균 방 개수\nAveBedrms 가구당 평균 침실 개수\nPopulation 지역 내 인구 수\nAveOccup 가구당 평균 거주 인원 수\nLatitude 위도\nLongitude 경도\nMedHouseVal 주택 중위 가격 (100,000 USD)\n종속변수(target)는 MedHouseVal (주택 중위 가격 (100,000 USD))임\n\n\n# 데이터 전처리 : 결측값 확인\n# 결측값은 없는 것으로 나타남\ndf.isna().sum()\n\nMedInc         0\nHouseAge       0\nAveRooms       0\nAveBedrms      0\nPopulation     0\nAveOccup       0\nLatitude       0\nLongitude      0\nMedHouseVal    0\ndtype: int64"
  },
  {
    "objectID": "project1.html#학습평가-데이터-분할",
    "href": "project1.html#학습평가-데이터-분할",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "3. 학습/평가 데이터 분할",
    "text": "3. 학습/평가 데이터 분할\n\n학습 데이터와 평가 데이터를 7:3 비율로 분할함\n\n\n# 학습/평가 데이터 분할 (7:3비율)\nX = data.data         # feature\ny = data.target       # target\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=42)"
  },
  {
    "objectID": "project1.html#데이터-탐색",
    "href": "project1.html#데이터-탐색",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "4. 데이터 탐색",
    "text": "4. 데이터 탐색\n\n# 요약 통계량 확인\ndf_train = pd.concat([X_train, y_train], axis=1)\ndf_train.describe()\n\n\n\n\n\n\n\n\nMedInc\nHouseAge\nAveRooms\nAveBedrms\nPopulation\nAveOccup\nLatitude\nLongitude\nMedHouseVal\n\n\n\n\ncount\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n14448.000000\n\n\nmean\n3.876892\n28.575374\n5.438125\n1.098033\n1427.927326\n3.119236\n35.650669\n-119.584102\n2.069240\n\n\nstd\n1.904908\n12.613634\n2.453569\n0.447498\n1140.225190\n12.373636\n2.135742\n2.002930\n1.157492\n\n\nmin\n0.499900\n1.000000\n0.888889\n0.333333\n3.000000\n0.692308\n32.550000\n-124.350000\n0.149990\n\n\n25%\n2.567225\n18.000000\n4.448928\n1.006783\n791.000000\n2.430380\n33.940000\n-121.800000\n1.193000\n\n\n50%\n3.539100\n29.000000\n5.232422\n1.049492\n1168.000000\n2.817147\n34.270000\n-118.510000\n1.793000\n\n\n75%\n4.758075\n37.000000\n6.060692\n1.100328\n1727.000000\n3.279135\n37.720000\n-118.010000\n2.646000\n\n\nmax\n15.000100\n52.000000\n141.909091\n25.636364\n35682.000000\n1243.333333\n41.950000\n-114.310000\n5.000010\n\n\n\n\n\n\n\n\n# 중위 주택 가격에 대한 분포\nplt.figure(figsize=(8,5))\nsns.histplot(df_train['MedHouseVal'], color='c', alpha=0.77)\nplt.show()\n\n\n\n\n\n\n\n\n\n# 중위 주택 가격에 대한 분포\nplt.figure(figsize=(8,3))\nsns.boxplot(x='MedHouseVal', color='skyblue',data=df_train,)\nplt.show()\n\n\n\n\n\n\n\n\n\n중위 주택 가격의 평균은 약 20만 달러, 표준편차는 11만 달러로 나타남\n\n중위 주택 가격의 최소값은 1만 4천 달러, 1사분위수는 11만 9천 달러, 중앙 값은 17만 9천 달러, 3사분위수는 26만 달러, 최대값은 50만 달러임\n\n히스토그램과 상자 그림을 살펴보면 중위 주택 가격이 매우 높은 이상값이 많이 존재\n\n\n# 산점도\nsns.pairplot(df_train, height=0.8, plot_kws={'s':5}, diag_kind='kde')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 상관계수\ncorr_train=df_train.corr()\nupp_mat = np.triu(corr_train)\n\nplt.figure(figsize=(8,6))\nsns.heatmap(corr_train, annot=True, mask=upp_mat,vmin=-1, vmax=1, cmap='BrBG')\nplt.show()\n\n\n\n\n\n\n\n\n\n중위 주택 가격은 지역 중위 소득과 강한 양의 상관관계가 존재함\n또한 주택 연식, 가구당 평균 방 개수, 위도 간에도 약한 양의 상관관계가 있음\n따라서 중위 주택 가격을 예측하는 특성(feature)으로 해당 변수를 선택함"
  },
  {
    "objectID": "project1.html#회귀모델-학습",
    "href": "project1.html#회귀모델-학습",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "5. 회귀모델 학습",
    "text": "5. 회귀모델 학습\n\n# 상관관계가 존재하는 특성(feature) 선택\nfeatures = ['MedInc', 'HouseAge', 'AveRooms', 'Latitude']\ntarget = 'MedHouseVal'\n\nX_train = df_train[features]           #2차원 배열\n\n\n# 선형 회귀모델 생성 및 학습\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# 회귀계수(regression coefficient)\npd.DataFrame({'Features': features, 'Coefficient':model.coef_})\n\n\n\n\n\n\n\n\nFeatures\nCoefficient\n\n\n\n\n0\nMedInc\n0.435658\n\n\n1\nHouseAge\n0.016937\n\n\n2\nAveRooms\n-0.019505\n\n\n3\nLatitude\n-0.045071\n\n\n\n\n\n\n\n\n특성(feature)이 중위 주택 가격(target)에 미치는 영향은 다음과 같음\n\n회귀계수를 살펴보면 지역 중위 소득이 1만 달러 증가할수록 중위 주택 가격은 4만 3천 달러 증가하는 것으로 나타남. 이는 경제적으로 여유가 있을수록 좋은 집에 거주하는 경향이 있음을 보임\n주택연식이 1년 증가하면 1693달러 증가하는 것으로 나타남\n가구당 평균 방 개수가 1개 증가하면 중위 주택 가격은 1950달러 감소함\n위도가 1도 증가하면 4507달러 감소하는 경향이 있음. 이는 일반적으로 캘리포니아주는 남부 지역이 상대적으로 대도시가 많아 주택 가격이 더 높은 것을 반영하는 것으로 판단됨"
  },
  {
    "objectID": "project1.html#회귀모델-평가",
    "href": "project1.html#회귀모델-평가",
    "title": "Project1 : 캘리포니아 주택 가격 분석",
    "section": "6. 회귀모델 평가",
    "text": "6. 회귀모델 평가\n\n# 평가 데이터에서도 학습 데이터에서 사용한 독립변수만 선택\nX_test = X_test[features]\n\n#학습 데이터로 학습한 회귀모델에 평가 데이터를 입력하여 예측값 계산\ny_pred = model.predict(X_test)\n\n#평가 데이터의 실제 관측값과 예측값을 비교하여 모델\nfrom sklearn.metrics import mean_squared_error, r2_score\nRMSE = np.sqrt(mean_squared_error(y_test, y_pred))\nR2= r2_score(y_test,y_pred)\n\nprint(f'RMSE : {RMSE:.3f}')\nprint(f'결정계수 : {R2:.3f}')\n\nRMSE : 0.794\n결정계수 : 0.520\n\n\n\nRMSE는 0.794으로, 주택 중위 가격의 실제값과 예측값이 평균적으로 약 8만 달러 차이가 있다는 것을 의미함\n학습 데이터에서 주택 중위 가격의 평균은 약 20만 달러인 점을 고려하면, 모델의 평균 오차는 약 25% 수준임을 알 수 있음\n따라서 평균 오차가 비교적 큰 편이므로, 모델 성능 개선이 필요한 것으로 판단됨\n결정계수는 52.0%로 나타남"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2025 창의융합과제연구",
    "section": "",
    "text": "전주솔내고 최아리의 창의융합과제.\nproject1, project2, project타이타닉으로 이루어져 있습니다."
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "progect2. 붓꽃 분류",
    "section": "",
    "text": "seaborn에서는 붓꽃에 대한 데이터를 제공함\n붓꽃의 품종에 영향을 미치는 요인은 무엇인지 파악하고, 모델학습을 통해 품종을 예측하고자 함"
  },
  {
    "objectID": "project2.html#데이터셋",
    "href": "project2.html#데이터셋",
    "title": "progect2. 붓꽃 분류",
    "section": "",
    "text": "seaborn에서는 붓꽃에 대한 데이터를 제공함\n붓꽃의 품종에 영향을 미치는 요인은 무엇인지 파악하고, 모델학습을 통해 품종을 예측하고자 함"
  },
  {
    "objectID": "project2.html#데이터-확인-및-전처리",
    "href": "project2.html#데이터-확인-및-전처리",
    "title": "progect2. 붓꽃 분류",
    "section": "2. 데이터 확인 및 전처리",
    "text": "2. 데이터 확인 및 전처리\n\n# 라이브러리 불러오기\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# 데이터 불러오기\ndf = sns.load_dataset('iris')\ndf.head()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\n\n# 데이터 확인\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 150 entries, 0 to 149\nData columns (total 5 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   sepal_length  150 non-null    float64\n 1   sepal_width   150 non-null    float64\n 2   petal_length  150 non-null    float64\n 3   petal_width   150 non-null    float64\n 4   species       150 non-null    object \ndtypes: float64(4), object(1)\nmemory usage: 6.0+ KB\n\n\n\n## 데이터 전처리 : 결측값 확인\n# 결측값은 없는 것으로 나타남\ndf.isna().sum()\n\nsepal_length    0\nsepal_width     0\npetal_length    0\npetal_width     0\nspecies         0\ndtype: int64"
  },
  {
    "objectID": "project2.html#학습평가-데이터-분할",
    "href": "project2.html#학습평가-데이터-분할",
    "title": "progect2. 붓꽃 분류",
    "section": "3. 학습/평가 데이터 분할",
    "text": "3. 학습/평가 데이터 분할\n\n학습 데이터와 평가 데이터를 8:2 비율로 분할함\n\n\n# 학습/평가 데이터 분할 (8:2비율)\nX = df.drop(columns='species')         # feature\ny = df['species']                      # target\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)"
  },
  {
    "objectID": "project2.html#데이터-탐색",
    "href": "project2.html#데이터-탐색",
    "title": "progect2. 붓꽃 분류",
    "section": "4. 데이터 탐색",
    "text": "4. 데이터 탐색\n\n# 요약 통계량\nX_train.describe()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\n\n\n\n\ncount\n120.000000\n120.000000\n120.000000\n120.000000\n\n\nmean\n5.809167\n3.061667\n3.726667\n1.183333\n\n\nstd\n0.823805\n0.449123\n1.752345\n0.752289\n\n\nmin\n4.300000\n2.000000\n1.000000\n0.100000\n\n\n25%\n5.100000\n2.800000\n1.500000\n0.300000\n\n\n50%\n5.750000\n3.000000\n4.250000\n1.300000\n\n\n75%\n6.400000\n3.400000\n5.100000\n1.800000\n\n\nmax\n7.700000\n4.400000\n6.700000\n2.500000\n\n\n\n\n\n\n\n\n# 상자수염 그래프\ndf_train = pd.concat([X_train,y_train], axis=1)\n\nplt.figure(figsize=(8,4))\nfor i, feature in enumerate(X_train.columns):\n    plt.subplot(2,2,i+1)\n    sns.boxplot(x=feature,y='species', hue='species',data=df_train)\n    plt.ylabel('')\nplt.show()\n\n\n\n\n\n\n\n\n\n# 산점도\nsns.pairplot(df_train, hue='species', height=2)\nplt.show()"
  },
  {
    "objectID": "project2.html#분류모델-학습-및-평가",
    "href": "project2.html#분류모델-학습-및-평가",
    "title": "progect2. 붓꽃 분류",
    "section": "5. 분류모델 학습 및 평가",
    "text": "5. 분류모델 학습 및 평가\n\na = [1,2]\na\n\n[1, 2]\n\n\n\na.append(10)\na\n\n[1, 2, 10]\n\n\n\n# 최적의 k 값 선택\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\n\nk_range = range(1, 20, 2)\nk_scores = []\n\nfor k in range(1,2):\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores=cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy')\n    k_scores.append(scores.mean())\n    print(f'k={k}일 때 정확도 : {scores.mean():.3f}')\n\nk=1일 때 정확도 : 0.950\n\n\n\n# 모델 성능이 가장 좋은 k 값 선택\nbest_k = k_range[k_scores.index(max(k_scores))]\nprint(f\"최적의 k 값은 {best_k}이며, 평균 정확도는 {max(k_scores):.3f}\")\n\n최적의 k 값은 1이며, 평균 정확도는 0.950\n\n\n\n#  K-NN 분류 모델 생성 및 학습\nknn = KNeighborsClassifier(n_neighbors=best_k)\nknn.fit(X_train, y_train)\n\n# 학습 데이터로 학습한 분류모델에 평가 데이터를 입력하여 클래스 분류\ny_pred = knn.predict(X_test)\n\n# 분류 모델 평가 : 정확도, 정밀도, 재현도\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score\naccuracy = accuracy_score(y_test, y_pred)\nprecision = precision_score(y_test, y_pred, average='micro')\nrecall = recall_score(y_test, y_pred, average='micro')\n\nprint(f\"정확도 : {accuracy:.3f}\")\nprint(f\"정밀도 : {precision:.3f}\")\nprint(f\"재현율 : {recall:.3f}\")\n\n정확도 : 1.000\n정밀도 : 1.000\n재현율 : 1.000"
  }
]